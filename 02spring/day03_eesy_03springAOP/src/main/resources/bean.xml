<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        https://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        https://www.springframework.org/schema/aop/spring-aop.xsd">

    <!-- 配置spring的Ioc，把service对象配置进来 -->
    <bean id="accountService" class="top.niandui.service.impl.AccountServiceImpl"></bean>

    <!-- spring中基于xml的AOP配置步骤
        1、把通知Bean也交给spring来管理
        2、使用aop:config标签表明开始AOP的配置
        3、使用aop:aspect标签表明开始配置切面（切入点 + 通知 = 切面）
            id属性：是给切面提供一个唯一的标识
            ref属性：是指定通知类Bean的id
        4、在aop:aspect标签的内部使用对应的标签来配置通知的类型
            我们现在示例是让printLog方法在切入点执行之前执行：所以是前置通知
            aop:before：表示配置前置通知
                method属性：用于指定Logger类中那个方法是前置通知
                pointcut属性：用于执行切入点表达式，该表达时的含义指的是对业务层中的那些方法增强

            切入点表达式的写法：
                关键字：execution(表达式)
                表达式：
                    访问修饰符   返回值     包名.包名.包名...类名.方法名(参数列表)
                标准的表达式写法：
                    public void top.niandui.service.impl.AccountServiceImpl.saveAccount()

                怎么改造
                    1、访问修饰符可以省略
                    2、返回值可以使用通配符，表示任意返回值
                    3、包名可以使用通配符，表示任意包，但是有几个包就需要写几个“*.”
                    4、包名可已使用“..”表示当前包及其子包
                    5、类名和方法名都可以使用“*”来实现统配
                    6、参数列表：
                        可以直接写数据类型：
                            基本类型直接写                  int
                            引用类型写“包名.类型名”的方式    java.lang.String
                        可以使用通配符表示任意类型，但是必须有参数
                        可以使用“..”表示有无参数均可，有参数可以是任意类型

              * 全通配写法：
                    * *..*.*(..)


                    切到业务层实现类的所有方法：
                        * top.niandui.service.impl.*.*(..)
                        * top.niandui.service..*.*(..)
    -->

    <!-- 配置Logger类 -->
    <bean id="logger" class="top.niandui.utils.Logger"></bean>

    <!-- 配置AOP -->
    <aop:config>
        <!-- 配置切面 -->
        <aop:aspect id="logAdvice" ref="logger">
            <!-- 配置通知的类型，并且建立通知方法和切入点方法的关联 -->
<!--            <aop:before method="printLog" pointcut="execution(public void top.niandui.service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->

            <!-- 1、访问修饰符可以省略 -->
<!--            <aop:before method="printLog" pointcut="execution(void top.niandui.service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->

            <!-- 2、返回值可以使用通配符，表示任意返回值 -->
<!--            <aop:before method="printLog" pointcut="execution(* top.niandui.service.impl.AccountServiceImpl.saveAccount())"></aop:before>-->

            <!-- 3、包名可以使用通配符，表示任意包，但是有几个包就需要写几个“*.” -->
<!--            <aop:before method="printLog" pointcut="execution(* *.*.*.*.AccountServiceImpl.saveAccount())"></aop:before>-->

            <!-- 4、包名可已使用“..”表示当前包及其子包 -->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.AccountServiceImpl.saveAccount())"></aop:before>-->

            <!-- 5、类名和方法名都可以使用“*”来实现统配 -->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*.*())"></aop:before>-->

            <!-- 6、参数列表： -->
            <!-- 可以直接写数据类型： -->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*.*(int))"></aop:before>-->
            <!-- 可以使用通配符表示任意类型，但是必须有参数 -->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*.*(*))"></aop:before>-->
            <!-- 可以使用“..”表示有无参数均可，有参数可以是任意类型 -->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*.*(..))"></aop:before>-->


            <!-- 全通配写法 -->
<!--            <aop:before method="printLog" pointcut="execution(* *..*.*(..))"></aop:before>-->

            <!-- 实际开发中切入点表达式的通常写法： -->
            <aop:before method="printLog" pointcut="execution(* top.niandui.service.impl.*.*(..))"></aop:before>
        </aop:aspect>


    </aop:config>

</beans>